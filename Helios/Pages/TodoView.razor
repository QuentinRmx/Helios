@page "/"
@using Helios.Data.Models
@using Helios.Data.Repository


<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
<div class="debug">@App.TodoRepo?.Message</div>
<h1>To-do list (@todos.Count())</h1>


<input placeholder="New To-do..." value="@NewTodoName" @oninput="(e)=> NewTodoName = e.Value.ToString()" />
<button class="btn btn-primary @((String.IsNullOrWhiteSpace(NewTodoName)) ? "disabled" : "")" @onclick="@(async () => await NewTodo() )">+</button>
@*<button class="btn btn-primary" @onclick="@(async () => await SaveChanges())">💾</button>*@


<ul class="list-group">
    @foreach (var todo in todos)
    {
        <li class="list-group-item">
            <Helios.Components.TodoRow Todo="@todo"
                                    DeleteCallback="@(async () => await DeleteTodo(todo) )"
                                    CbIsDoneCallback="@(async () => await UpdateTodo(todo) )" />
        </li>
    }
</ul>

@code {
    #nullable enable

    // list of all todo.
    private List<Todo> todos = new();

    public string? NewTodoName;

    // Override of async initialized event, should be called once at start-up.
    protected override async Task OnInitializedAsync()
    {
        if (App.TodoRepo is null)
            return;
        todos = await App.TodoRepo.GetAll();
    }


    // Callback for + Button.
    private async Task NewTodo()
    {

        if (string.IsNullOrWhiteSpace(NewTodoName))
        {
            //TODO: manage error
            return;
        }

        if (App.TodoRepo is null)
            return;

        var todo = new Todo
            {
                Title = NewTodoName
            };
        var result = await App.TodoRepo.Add(todo);
        todos.Add(todo);
        NewTodoName = string.Empty;
    }

    private async Task DeleteTodo(Todo todo)
    {
        if (App.TodoRepo is null)
            return;

        var result = await App.TodoRepo.Delete(todo);
        todos.Remove(todo);
    }

    private async Task SaveChanges()
    {
        if (App.TodoRepo is null)
            return;

        var result = ERepositoryResponse.Failure;
        foreach (Todo t in todos)
        {
            result = await App.TodoRepo.Update(t);
            // todo : manage error.
        }
    }

    private async Task UpdateTodo(Todo todo)
    {
        if (App.TodoRepo is null)
            return;
        var result = await App.TodoRepo.Update(todo);
        if (result is ERepositoryResponse.Success)
            await ToastTodoRepoResponse("Todo successfully updated");
        else
            await ToastTodoRepoResponse($"Error while updating Todo: {todo.Title}");
    }

    private async Task ToastTodoRepoResponse(string message)
    {
        //CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

        //var snackbarOptions = new SnackbarOptions
        //    {
        //        BackgroundColor = Colors.Red,
        //        TextColor = Colors.Green,
        //        ActionButtonTextColor = Colors.Yellow,
        //        CornerRadius = new CornerRadius(10),
        //        Font = Microsoft.Maui.Font.SystemFontOfSize(14),
        //        ActionButtonFont = Microsoft.Maui.Font.SystemFontOfSize(14),
        //        CharacterSpacing = 0.5
        //    };

        //string text = "This is a Snackbar";
        //string actionButtonText = "Click Here to Dismiss";
        ////Action action = async () => await DisplayAlert("Snackbar ActionButton Tapped", "The user has tapped the Snackbar ActionButton", "OK");
        //TimeSpan duration = TimeSpan.FromSeconds(3);

        //var snackbar = Snackbar.Make(text, null, actionButtonText, duration, snackbarOptions);

        //await snackbar.Show(cancellationTokenSource.Token);


        //ToastDuration toastDuration = ToastDuration.Long;
        //double fontSize = 30d;
        //var toast = Toast.Make(message, toastDuration, fontSize);
        //await toast.Show();
        if (App.MainPageRef is not null)
            await ((MainPage)App.MainPageRef).ShowToast(message);
    }
}


<style>
    .debug {
        width: auto;
        height: auto;
    }
</style>
